###############################################################################
#
# IAR ANSI C/C++ Compiler V8.11.2.13589/W32 for ARM       13/Sep/2017  13:23:10
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Utilities\STM32F4-Discovery\stm32f4_discovery.c
#    Command line =  
#        -f C:\Users\mathieu\AppData\Local\Temp\EW55B.tmp
#        ("C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Utilities\STM32F4-Discovery\stm32f4_discovery.c"
#        -D USE_STDPERIPH_DRIVER -D STM32F4XX -lCN
#        "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\IO_Toggle\List"
#        -o "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\IO_Toggle\Obj"
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\..\"
#        -I "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\..\..\..\..\Libraries\CMSIS\Include\"
#        -I "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\..\..\..\..\Libraries\CMSIS\ST\STM32F4xx\Include\"
#        -I "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\..\..\..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"
#        -I "C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\..\..\..\..\Utilities\STM32F4-Discovery\"
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\IO_Toggle\List\stm32f4_discovery.lst
#    Object file  =  
#        C:\Users\mathieu\Documents\Session
#        5\SMI\STM32F4-Discovery_FW_V1.1.0\Project\Peripheral_Examples\IO_Toggle\EWARM\IO_Toggle\Obj\stm32f4_discovery.o
#
###############################################################################

C:\Users\mathieu\Documents\Session 5\SMI\STM32F4-Discovery_FW_V1.1.0\Utilities\STM32F4-Discovery\stm32f4_discovery.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4_discovery.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    28-October-2011
      7            * @brief   This file provides set of firmware functions to manage Leds and
      8            *          push-button available on STM32F4-Discovery Kit from STMicroelectronics.
      9            ******************************************************************************
     10            * @attention
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     20            ******************************************************************************
     21            */ 
     22            
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm32f4_discovery.h"
     25          
     26          /** @addtogroup Utilities
     27            * @{
     28            */ 
     29          
     30          /** @addtogroup STM32F4_DISCOVERY
     31            * @{
     32            */   
     33              
     34          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL 
     35            * @brief This file provides set of firmware functions to manage Leds and push-button
     36            *        available on STM32F4-Discovery Kit from STMicroelectronics.
     37            * @{
     38            */ 
     39          
     40          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_TypesDefinitions
     41            * @{
     42            */ 
     43          /**
     44            * @}
     45            */ 
     46          
     47          
     48          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_Defines
     49            * @{
     50            */ 
     51          /**
     52            * @}
     53            */ 
     54          
     55          
     56          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_Macros
     57            * @{
     58            */ 
     59          /**
     60            * @}
     61            */ 
     62          
     63          
     64          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_Variables
     65            * @{
     66            */ 

   \                                 In section .data, align 4
     67          GPIO_TypeDef* GPIO_PORT[LEDn] = {LED4_GPIO_PORT, LED3_GPIO_PORT, LED5_GPIO_PORT,
   \                     GPIO_PORT:
   \   00000000   0x40020C00         DC32 40020C00H, 40020C00H, 40020C00H, 40020C00H
   \              0x40020C00   
   \              0x40020C00   
   \              0x40020C00   
     68                                           LED6_GPIO_PORT};

   \                                 In section .text, align 4, keep-with-next
     69          const uint16_t GPIO_PIN[LEDn] = {LED4_PIN, LED3_PIN, LED5_PIN,
   \                     GPIO_PIN:
   \   00000000   0x1000 0x2000      DC16 4096, 8192, 16384, 32768
   \              0x4000 0x8000
     70                                           LED6_PIN};

   \                                 In section .text, align 4, keep-with-next
     71          const uint32_t GPIO_CLK[LEDn] = {LED4_GPIO_CLK, LED3_GPIO_CLK, LED5_GPIO_CLK,
   \                     GPIO_CLK:
   \   00000000   0x00000008         DC32 8, 8, 8, 8
   \              0x00000008   
   \              0x00000008   
   \              0x00000008   
     72                                           LED6_GPIO_CLK};
     73          

   \                                 In section .data, align 4
     74          GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {USER_BUTTON_GPIO_PORT }; 
   \                     BUTTON_PORT:
   \   00000000   0x40020000         DC32 40020000H
     75          

   \                                 In section .text, align 4, keep-with-next
     76          const uint16_t BUTTON_PIN[BUTTONn] = {USER_BUTTON_PIN }; 
   \                     BUTTON_PIN:
   \   00000000   0x0001             DC16 1
     77          

   \                                 In section .text, align 4, keep-with-next
     78          const uint32_t BUTTON_CLK[BUTTONn] = {USER_BUTTON_GPIO_CLK };
   \                     BUTTON_CLK:
   \   00000000   0x00000001         DC32 1
     79          

   \                                 In section .text, align 4, keep-with-next
     80          const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE };
   \                     BUTTON_EXTI_LINE:
   \   00000000   0x0001             DC16 1
     81          

   \                                 In section .text, align 4, keep-with-next
     82          const uint8_t BUTTON_PORT_SOURCE[BUTTONn] = {USER_BUTTON_EXTI_PORT_SOURCE};
   \                     BUTTON_PORT_SOURCE:
   \   00000000   0x00               DC8 0
     83          								 

   \                                 In section .text, align 4, keep-with-next
     84          const uint8_t BUTTON_PIN_SOURCE[BUTTONn] = {USER_BUTTON_EXTI_PIN_SOURCE }; 
   \                     BUTTON_PIN_SOURCE:
   \   00000000   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
     85          const uint8_t BUTTON_IRQn[BUTTONn] = {USER_BUTTON_EXTI_IRQn };
   \                     BUTTON_IRQn:
   \   00000000   0x06               DC8 6
     86          

   \                                 In section .bss, align 4
     87          NVIC_InitTypeDef   NVIC_InitStructure;
   \                     NVIC_InitStructure:
   \   00000000                      DS8 4
     88          
     89          /**
     90            * @}
     91            */ 
     92          
     93          
     94          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_FunctionPrototypes
     95            * @{
     96            */ 
     97          
     98          /**
     99            * @}
    100            */ 
    101          
    102          /** @defgroup STM32F4_DISCOVERY_LOW_LEVEL_Private_Functions
    103            * @{
    104            */ 
    105          
    106          /**
    107            * @brief  Configures LED GPIO.
    108            * @param  Led: Specifies the Led to be configured. 
    109            *   This parameter can be one of following parameters:
    110            *     @arg LED4
    111            *     @arg LED3
    112            *     @arg LED5
    113            *     @arg LED6
    114            * @retval None
    115            */

   \                                 In section .text, align 2, keep-with-next
    116          void STM_EVAL_LEDInit(Led_TypeDef Led)
    117          {
   \                     STM_EVAL_LEDInit: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    118            GPIO_InitTypeDef  GPIO_InitStructure;
    119            
    120            /* Enable the GPIO_LED Clock */
    121            RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
   \   00000004   0x.... 0x....      ADR.W    R0,GPIO_CLK
   \   00000008   0x.... 0x....      BL       ?Subroutine0
    122          
    123            /* Configure the GPIO_LED pin */
    124            GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000000C   0x.... 0x....      ADR.W    R1,GPIO_PIN
   \   00000010   0xF831 0x0014      LDRH     R0,[R1, R4, LSL #+1]
   \   00000014   0x9000             STR      R0,[SP, #+0]
    125            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   00000016   0x2101             MOVS     R1,#+1
    126            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   0000001E   0xF88D 0x1004      STRB     R1,[SP, #+4]
    127            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    128            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000028   0xF88D 0x1007      STRB     R1,[SP, #+7]
    129            GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x....             LDR.N    R0,??DataTable13
   \   00000030   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000034   0x.... 0x....      BL       GPIO_Init
    130          }
   \   00000038   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      B.W      RCC_AHB1PeriphClockCmd
    131          
    132          /**
    133            * @brief  Turns selected LED On.
    134            * @param  Led: Specifies the Led to be set on. 
    135            *   This parameter can be one of following parameters:
    136            *     @arg LED4
    137            *     @arg LED3
    138            *     @arg LED5
    139            *     @arg LED6  
    140            * @retval None
    141            */

   \                                 In section .text, align 2, keep-with-next
    142          void STM_EVAL_LEDOn(Led_TypeDef Led)
    143          {
    144            GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
   \                     STM_EVAL_LEDOn: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,GPIO_PIN
   \   00000004   0x....             LDR.N    R2,??DataTable13
   \   00000006   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000A   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000000E   0x8301             STRH     R1,[R0, #+24]
    145          }
   \   00000010   0x4770             BX       LR               ;; return
    146          
    147          /**
    148            * @brief  Turns selected LED Off.
    149            * @param  Led: Specifies the Led to be set off. 
    150            *   This parameter can be one of following parameters:
    151            *     @arg LED4
    152            *     @arg LED3
    153            *     @arg LED5
    154            *     @arg LED6 
    155            * @retval None
    156            */

   \                                 In section .text, align 2, keep-with-next
    157          void STM_EVAL_LEDOff(Led_TypeDef Led)
    158          {
    159            GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
   \                     STM_EVAL_LEDOff: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,GPIO_PIN
   \   00000004   0x....             LDR.N    R2,??DataTable13
   \   00000006   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000A   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000000E   0x8341             STRH     R1,[R0, #+26]
    160          }
   \   00000010   0x4770             BX       LR               ;; return
    161          
    162          /**
    163            * @brief  Toggles the selected LED.
    164            * @param  Led: Specifies the Led to be toggled. 
    165            *   This parameter can be one of following parameters:
    166            *     @arg LED4
    167            *     @arg LED3
    168            *     @arg LED5
    169            *     @arg LED6  
    170            * @retval None
    171            */

   \                                 In section .text, align 2, keep-with-next
    172          void STM_EVAL_LEDToggle(Led_TypeDef Led)
    173          {
    174            GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
   \                     STM_EVAL_LEDToggle: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable13
   \   00000002   0x.... 0x....      ADR.W    R3,GPIO_PIN
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x694A             LDR      R2,[R1, #+20]
   \   0000000C   0xF833 0x0010      LDRH     R0,[R3, R0, LSL #+1]
   \   00000010   0x4042             EORS     R2,R0,R2
   \   00000012   0x614A             STR      R2,[R1, #+20]
    175          }
   \   00000014   0x4770             BX       LR               ;; return
    176          
    177          /**
    178            * @brief  Configures Button GPIO and EXTI Line.
    179            * @param  Button: Specifies the Button to be configured.
    180            *   This parameter should be: BUTTON_USER
    181            * @param  Button_Mode: Specifies Button mode.
    182            *   This parameter can be one of following parameters:   
    183            *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
    184            *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
    185            *                            generation capability  
    186            * @retval None
    187            */

   \                                 In section .text, align 2, keep-with-next
    188          void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
    189          {
   \                     STM_EVAL_PBInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    190            GPIO_InitTypeDef GPIO_InitStructure;
    191            EXTI_InitTypeDef EXTI_InitStructure;
    192            NVIC_InitTypeDef NVIC_InitStructure;
    193          
    194            /* Enable the BUTTON Clock */
    195            RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
   \   00000004   0x.... 0x....      ADR.W    R0,BUTTON_CLK
   \   00000008   0xB085             SUB      SP,SP,#+20
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x.... 0x....      BL       ?Subroutine0
    196            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xF44F 0x4080      MOV      R0,#+16384
   \   00000016   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
    197          
    198            /* Configure Button pin as input */
    199            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    200            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
   \   00000020   0xF88D 0x0013      STRB     R0,[SP, #+19]
    201            GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
    202            GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
   \   00000024   0xA903             ADD      R1,SP,#+12
   \   00000026   0x.... 0x....      ADR.W    R0,BUTTON_PIN
   \   0000002A   0x....             LDR.N    R2,??DataTable13_1
   \   0000002C   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0xF852 0x0024      LDR      R0,[R2, R4, LSL #+2]
   \   00000036   0x.... 0x....      BL       GPIO_Init
    203          
    204            if (Button_Mode == BUTTON_MODE_EXTI)
   \   0000003A   0x2D01             CMP      R5,#+1
   \   0000003C   0xD128             BNE.N    ??STM_EVAL_PBInit_0
    205            {
    206              /* Connect Button EXTI Line to Button GPIO Pin */
    207              SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
   \   0000003E   0x.... 0x....      ADR.W    R0,BUTTON_PIN_SOURCE
   \   00000042   0x5D01             LDRB     R1,[R0, R4]
   \   00000044   0x.... 0x....      ADR.W    R0,BUTTON_PORT_SOURCE
   \   00000048   0x5D00             LDRB     R0,[R0, R4]
   \   0000004A   0x.... 0x....      BL       SYSCFG_EXTILineConfig
    208          
    209              /* Configure Button EXTI line */
    210              EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
   \   0000004E   0x.... 0x....      ADR.W    R0,BUTTON_EXTI_LINE
   \   00000052   0xF830 0x0014      LDRH     R0,[R0, R4, LSL #+1]
   \   00000056   0x9001             STR      R0,[SP, #+4]
    211              EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0xF88D 0x1008      STRB     R1,[SP, #+8]
    212              EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
   \   0000005E   0x2008             MOVS     R0,#+8
   \   00000060   0xF88D 0x0009      STRB     R0,[SP, #+9]
    213              EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0xF88D 0x100A      STRB     R1,[SP, #+10]
    214              EXTI_Init(&EXTI_InitStructure);
   \   0000006A   0xA801             ADD      R0,SP,#+4
   \   0000006C   0x.... 0x....      BL       EXTI_Init
    215          
    216              /* Enable and set Button EXTI Interrupt to the lowest priority */
    217              NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
   \   00000070   0x.... 0x....      ADR.W    R0,BUTTON_IRQn
   \   00000074   0x5D00             LDRB     R0,[R0, R4]
   \   00000076   0xF88D 0x0000      STRB     R0,[SP, #+0]
    218              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   \   0000007A   0x210F             MOVS     R1,#+15
   \   0000007C   0xF88D 0x1001      STRB     R1,[SP, #+1]
    219              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   \   00000080   0xF88D 0x1002      STRB     R1,[SP, #+2]
    220              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    221          
    222              NVIC_Init(&NVIC_InitStructure); 
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0xF88D 0x1003      STRB     R1,[SP, #+3]
   \   0000008C   0x.... 0x....      BL       NVIC_Init
    223            }
    224          }
   \                     ??STM_EVAL_PBInit_0: (+1)
   \   00000090   0xB005             ADD      SP,SP,#+20
   \   00000092   0xBD30             POP      {R4,R5,PC}       ;; return
    225          
    226          /**
    227            * @brief  Returns the selected Button state.
    228            * @param  Button: Specifies the Button to be checked.
    229            *   This parameter should be: BUTTON_USER  
    230            * @retval The Button GPIO pin value.
    231            */

   \                                 In section .text, align 2, keep-with-next
    232          uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
    233          {
    234            return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
   \                     STM_EVAL_PBGetState: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,BUTTON_PIN
   \   00000004   0x....             LDR.N    R2,??DataTable13_1
   \   00000006   0xF831 0x1010      LDRH     R1,[R1, R0, LSL #+1]
   \   0000000A   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000000E   0x.... 0x....      B.W      GPIO_ReadInputDataBit
    235          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     GPIO_PORT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \   00000000   0x........         DC32     BUTTON_PORT
    236          
    237          /**
    238            * @}
    239            */ 
    240          
    241          /**
    242            * @}
    243            */ 
    244          
    245          /**
    246            * @}
    247            */   
    248          
    249          /**
    250            * @}
    251            */ 
    252              
    253          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   STM_EVAL_LEDInit
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   STM_EVAL_LEDOff
       0   STM_EVAL_LEDOn
       0   STM_EVAL_LEDToggle
       0   STM_EVAL_PBGetState
         0   -> GPIO_ReadInputDataBit
      32   STM_EVAL_PBInit
        32   -> EXTI_Init
        32   -> GPIO_Init
        32   -> NVIC_Init
        32   -> RCC_AHB1PeriphClockCmd
        32   -> RCC_APB2PeriphClockCmd
        32   -> SYSCFG_EXTILineConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
      10  ?Subroutine0
       4  BUTTON_CLK
       2  BUTTON_EXTI_LINE
       1  BUTTON_IRQn
       2  BUTTON_PIN
       1  BUTTON_PIN_SOURCE
       4  BUTTON_PORT
       1  BUTTON_PORT_SOURCE
      16  GPIO_CLK
       8  GPIO_PIN
      16  GPIO_PORT
       4  NVIC_InitStructure
      58  STM_EVAL_LEDInit
      18  STM_EVAL_LEDOff
      18  STM_EVAL_LEDOn
      22  STM_EVAL_LEDToggle
      18  STM_EVAL_PBGetState
     148  STM_EVAL_PBInit

 
   4 bytes in section .bss
  20 bytes in section .data
 335 bytes in section .text
 
 335 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: none
